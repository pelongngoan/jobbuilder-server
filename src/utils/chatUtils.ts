import { Job } from "../database/models/Job";
import { Resume } from "../database/models/Resume";

// Vietnamese keywords for query analysis
const VIETNAMESE_KEYWORDS = {
  resume: ["s∆° y·∫øu l√Ω l·ªãch", "cv", "h·ªì s∆°", "l√Ω l·ªãch"],
  job: ["vi·ªác l√†m", "c√¥ng vi·ªác", "ngh·ªÅ nghi·ªáp", "v·ªã tr√≠", "job"],
  company: ["c√¥ng ty", "doanh nghi·ªáp", "nh√† tuy·ªÉn d·ª•ng", "c√¥ng ty"],
  help: ["gi√∫p", "h∆∞·ªõng d·∫´n", "l√†m sao", "th·∫ø n√†o"],
  search: ["t√¨m", "t√¨m ki·∫øm", "ki·∫øm", "t√¨m vi·ªác", "t√¨m ki·∫øm vi·ªác l√†m"],
};

// English keywords for query analysis
const ENGLISH_KEYWORDS = {
  resume: ["resume", "cv", "curriculum vitae"],
  job: ["job", "position", "work", "career", "employment"],
  company: ["company", "employer", "business", "organization"],
  help: ["help", "guide", "how to", "instruction"],
  search: ["search", "find", "look for", "seek"],
};

export const chatUtils = {
  // Analyze the user's message to determine the type of query
  analyzeQuery(content: string): string {
    const lowerContent = content.toLowerCase();

    // Check Vietnamese keywords
    for (const [type, keywords] of Object.entries(VIETNAMESE_KEYWORDS)) {
      if (keywords.some((keyword) => lowerContent.includes(keyword))) {
        return type;
      }
    }

    // Check English keywords
    for (const [type, keywords] of Object.entries(ENGLISH_KEYWORDS)) {
      if (keywords.some((keyword) => lowerContent.includes(keyword))) {
        return type;
      }
    }

    return "general";
  },

  // Detect languages in the query
  detectLanguages(content: string): string[] {
    const languages: string[] = [];

    // Check for Vietnamese characters
    if (
      /[\u0080-\u00FF\u0100-\u017F\u0180-\u024F\u0300-\u036F\u1E00-\u1EFF\u2C60-\u2C7F\uA720-\uA7FF]/.test(
        content
      )
    ) {
      languages.push("vietnamese");
    }

    // Check for English (basic check for Latin characters)
    if (/[a-zA-Z]/.test(content)) {
      languages.push("english");
    }

    // If no specific language detected, default to English
    if (languages.length === 0) {
      languages.push("english");
    }

    return languages;
  },

  // Generate appropriate response based on query type
  async generateResponse(queryType: string, content: string, userId: string) {
    // Detect languages in the query
    const languages = this.detectLanguages(content);

    // Generate responses for each detected language
    const responses: { [key: string]: string } = {};
    const jobRecommendations: any[] = [];

    for (const lang of languages) {
      const isVietnamese = lang === "vietnamese";

      let response;
      switch (queryType) {
        case "resume":
          response = await handleResumeQuery(content, userId, isVietnamese);
          break;
        case "job":
          response = await handleJobQuery(content, isVietnamese);
          break;
        case "company":
          response = await handleCompanyQuery(content, isVietnamese);
          break;
        case "help":
          response = handleHelpQuery(content, isVietnamese);
          break;
        case "search":
          response = await handleSearchQuery(content, isVietnamese);
          break;
        default:
          response = handleGeneralQuery(content, isVietnamese);
      }

      responses[lang] = response.content;

      // Use job recommendations from the first response
      if (
        jobRecommendations.length === 0 &&
        response.jobRecommendations.length > 0
      ) {
        jobRecommendations.push(...response.jobRecommendations);
      }
    }

    // Combine responses if multiple languages detected
    let combinedContent = "";
    if (languages.length > 1) {
      combinedContent = "Here's your response in multiple languages:\n\n";

      if (responses.english) {
        combinedContent += "üá∫üá∏ English:\n" + responses.english + "\n\n";
      }

      if (responses.vietnamese) {
        combinedContent += "üáªüá≥ Ti·∫øng Vi·ªát:\n" + responses.vietnamese;
      }
    } else {
      // Use the single language response
      combinedContent = responses[languages[0]];
    }

    return {
      content: combinedContent,
      jobRecommendations: jobRecommendations,
    };
  },
};

// Handle resume-related queries
async function handleResumeQuery(
  content: string,
  userId: string,
  isVietnamese: boolean
) {
  const resume = await Resume.findOne({ userId });
  if (!resume) {
    return {
      content: isVietnamese
        ? "T√¥i nh·∫≠n th·∫•y b·∫°n ch∆∞a t·∫£i l√™n s∆° y·∫øu l√Ω l·ªãch. B·∫°n c√≥ mu·ªën t√¥i h∆∞·ªõng d·∫´n c√°ch t·∫°o m·ªôt s∆° y·∫øu l√Ω l·ªãch kh√¥ng?"
        : "I notice you don't have a resume uploaded yet. Would you like me to guide you through creating one?",
      jobRecommendations: [],
    };
  }

  // Analyze resume content and provide recommendations
  const recommendations = isVietnamese
    ? [
        "H√£y th√™m c√°c th√†nh t√≠ch c·ª• th·ªÉ v·ªõi k·∫øt qu·∫£ c√≥ th·ªÉ ƒëo l∆∞·ªùng ƒë∆∞·ª£c",
        "ƒê·∫£m b·∫£o k·ªπ nƒÉng c·ªßa b·∫°n ph√π h·ª£p v·ªõi y√™u c·∫ßu c√¥ng vi·ªác b·∫°n quan t√¢m",
        "Gi·ªØ s∆° y·∫øu l√Ω l·ªãch ng·∫Øn g·ªçn v√† t·∫≠p trung v√†o kinh nghi·ªám li√™n quan",
      ]
    : [
        "Consider adding more specific achievements with quantifiable results",
        "Make sure your skills match the job requirements you're interested in",
        "Keep your resume concise and focused on relevant experience",
      ];

  return {
    content: isVietnamese
      ? `ƒê√¢y l√† m·ªôt s·ªë g·ª£i √Ω cho s∆° y·∫øu l√Ω l·ªãch c·ªßa b·∫°n:\n${recommendations.join(
          "\n"
        )}`
      : `Here are some recommendations for your resume:\n${recommendations.join(
          "\n"
        )}`,
    jobRecommendations: [],
  };
}

// Handle job-related queries
async function handleJobQuery(content: string, isVietnamese: boolean) {
  const jobs = await Job.find({
    $or: [
      { title: { $regex: content, $options: "i" } },
      { description: { $regex: content, $options: "i" } },
    ],
  }).limit(5);

  if (jobs.length === 0) {
    return {
      content: isVietnamese
        ? "T√¥i kh√¥ng t√¨m th·∫•y c√¥ng vi·ªác n√†o ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n. B·∫°n c√≥ mu·ªën th·ª≠ t√¨m ki·∫øm v·ªõi t·ª´ kh√≥a kh√°c kh√¥ng?"
        : "I couldn't find any jobs matching your query. Would you like to try a different search term?",
      jobRecommendations: [],
    };
  }

  return {
    content: isVietnamese
      ? "ƒê√¢y l√† m·ªôt s·ªë c√¥ng vi·ªác c√≥ th·ªÉ ph√π h·ª£p v·ªõi b·∫°n:"
      : "Here are some jobs that might interest you:",
    jobRecommendations: jobs,
  };
}

// Handle company-related queries
async function handleCompanyQuery(content: string, isVietnamese: boolean) {
  const jobs = await Job.find({
    companyName: { $regex: content, $options: "i" },
  }).limit(5);

  if (jobs.length === 0) {
    return {
      content: isVietnamese
        ? "T√¥i kh√¥ng t√¨m th·∫•y c√¥ng ty n√†o ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n. B·∫°n c√≥ mu·ªën th·ª≠ t√¨m ki·∫øm v·ªõi t·ª´ kh√≥a kh√°c kh√¥ng?"
        : "I couldn't find any companies matching your query. Would you like to try a different search term?",
      jobRecommendations: [],
    };
  }

  return {
    content: isVietnamese
      ? "ƒê√¢y l√† m·ªôt s·ªë c√¥ng ty v√† c√°c v·ªã tr√≠ tuy·ªÉn d·ª•ng c·ªßa h·ªç:"
      : "Here are some companies and their job openings:",
    jobRecommendations: jobs,
  };
}

// Handle help and guidance queries
function handleHelpQuery(content: string, isVietnamese: boolean) {
  const helpTopics = isVietnamese
    ? {
        search:
          'ƒê·ªÉ t√¨m ki·∫øm vi·ªác l√†m, b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng t·ª´ kh√≥a nh∆∞ t√™n c√¥ng vi·ªác, k·ªπ nƒÉng ho·∫∑c ƒë·ªãa ƒëi·ªÉm. V√≠ d·ª•: "T√¨m vi·ªác l·∫≠p tr√¨nh vi√™n t·∫°i H√† N·ªôi"',
        resume:
          "ƒê·ªÉ nh·∫≠n g·ª£i √Ω v·ªÅ s∆° y·∫øu l√Ω l·ªãch, h√£y h·ªèi t√¥i v·ªÅ s∆° y·∫øu l√Ω l·ªãch ho·∫∑c CV c·ªßa b·∫°n. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n c·∫£i thi·ªán n√≥!",
        apply:
          'ƒê·ªÉ ·ª©ng tuy·ªÉn v√†o m·ªôt c√¥ng vi·ªác, nh·∫•p v√†o tin tuy·ªÉn d·ª•ng v√† s·ª≠ d·ª•ng n√∫t "·ª®ng tuy·ªÉn". H√£y ƒë·∫£m b·∫£o s∆° y·∫øu l√Ω l·ªãch c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!',
        profile:
          'ƒê·ªÉ c·∫≠p nh·∫≠t h·ªì s∆° c·ªßa b·∫°n, v√†o ph·∫ßn H·ªì s∆° v√† nh·∫•p v√†o "Ch·ªânh s·ª≠a". B·∫°n c√≥ th·ªÉ th√™m k·ªπ nƒÉng, kinh nghi·ªám v√† s·ªü th√≠ch c·ªßa m√¨nh ·ªü ƒë√≥.',
      }
    : {
        search:
          'To search for jobs, you can use keywords like job title, skills, or location. For example: "Find software developer jobs in New York"',
        resume:
          "To get resume recommendations, ask me about your resume or CV. I can help you improve it!",
        apply:
          'To apply for a job, click on the job listing and use the "Apply" button. Make sure your resume is up to date!',
        profile:
          'To update your profile, go to the Profile section and click "Edit". You can add your skills, experience, and preferences there.',
      };

  let response = isVietnamese
    ? "ƒê√¢y l√† c√°ch t√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n"
    : "Here's how I can help you:\n";
  Object.entries(helpTopics).forEach(([topic, description]) => {
    response += `\n${topic.toUpperCase()}: ${description}`;
  });

  return {
    content: response,
    jobRecommendations: [],
  };
}

// Handle job search queries
async function handleSearchQuery(content: string, isVietnamese: boolean) {
  const searchTerms = content.toLowerCase().split(" ");
  const jobs = await Job.find({
    $or: [
      { title: { $regex: searchTerms.join("|"), $options: "i" } },
      { description: { $regex: searchTerms.join("|"), $options: "i" } },
      { skills: { $in: searchTerms } },
    ],
  }).limit(5);

  if (jobs.length === 0) {
    return {
      content: isVietnamese
        ? "T√¥i kh√¥ng t√¨m th·∫•y c√¥ng vi·ªác n√†o ph√π h·ª£p v·ªõi t√¨m ki·∫øm c·ªßa b·∫°n. H√£y th·ª≠ s·ª≠ d·ª•ng t·ª´ kh√≥a kh√°c ho·∫∑c xem c√°c danh m·ª•c vi·ªác l√†m c·ªßa ch√∫ng t√¥i."
        : "I couldn't find any jobs matching your search. Try using different keywords or browse our job categories.",
      jobRecommendations: [],
    };
  }

  return {
    content: isVietnamese
      ? "ƒê√¢y l√† m·ªôt s·ªë c√¥ng vi·ªác ph√π h·ª£p v·ªõi t√¨m ki·∫øm c·ªßa b·∫°n:"
      : "Here are some jobs that match your search:",
    jobRecommendations: jobs,
  };
}

// Handle general queries
function handleGeneralQuery(content: string, isVietnamese: boolean) {
  return {
    content: isVietnamese
      ? "T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªõi:\n- T√¨m vi·ªác l√†m\n- G·ª£i √Ω v·ªÅ s∆° y·∫øu l√Ω l·ªãch\n- Th√¥ng tin v·ªÅ c√¥ng ty\n- H∆∞·ªõng d·∫´n t√¨m vi·ªác\n\nB·∫°n mu·ªën bi·∫øt th√™m v·ªÅ ƒëi·ªÅu g√¨?"
      : "I can help you with:\n- Finding jobs\n- Resume recommendations\n- Company information\n- Job search guidance\n\nWhat would you like to know more about?",
    jobRecommendations: [],
  };
}
